Resources:
  WebBucket:
    Type: AWS::S3::Bucket
    Properties:
      # Needs to be unique in region
      # BucketName: ${self:provider.environment.NAMESPACE}-web-abcde12345
      BucketName: ${self:provider.environment.NAMESPACE}-web
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: 'AES256'
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: s3-web-access-logs
  #      VersioningConfiguration:
  #        Status: Enabled

  WebBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref WebBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: 's3:GetObject*'
            Effect: Allow
            Resource: !Sub ${WebBucket.Arn}/*
            Principal:
              Service: cloudfront.amazonaws.com
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${Distribution}

  LoggingBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: ${self:provider.environment.NAMESPACE}-logs
      PublicAccessBlockConfiguration:
        BlockPublicAcls : True
        BlockPublicPolicy : True
        IgnorePublicAcls : True
        RestrictPublicBuckets : True
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: 'AES256'
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
    DeletionPolicy: Delete

  Distribution:
    # Note: no AWS WAF (web app firewall) configured
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !GetAtt WebBucket.RegionalDomainName
          Id: S3Origin
          S3OriginConfig:
            # Empty string allows both cloudfront and s3 url access to resource
            # ref: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-s3originconfig.html#cfn-cloudfront-distribution-s3originconfig-originaccessidentity
            OriginAccessIdentity: ""
          OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
  #        - DomainName: !Sub "${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
  #          Id: ApiOrigin
  #          CustomOriginConfig:
  #            OriginProtocolPolicy: https-only
        Enabled: True
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          TargetOriginId: S3Origin
          # ref: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html#managed-cache-caching-optimized
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
          # ref: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html#managed-origin-request-policy-cors-s3
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
          # ref: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-response-headers-policies.html#managed-response-headers-policies-security
          ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # SecurityHeadersPolicy
          ViewerProtocolPolicy: redirect-to-https
  #        CacheBehaviors:
  #          - PathPattern: "v1/hello"
  #            AllowedMethods:
  #            - GET
  #            - HEAD
  #            - OPTIONS
  #            TargetOriginId: ApiOrigin
  #            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
  #            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac # AllViewerExceptHostHeader
  #            ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # SecurityHeadersPolicy
  #            ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_All
        Logging:
          Bucket: !GetAtt LoggingBucket.RegionalDomainName
          Prefix: cloudfront-access-logs
        ViewerCertificate:
          CloudFrontDefaultCertificate: True

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    DependsOn:
      - WebBucket
    Properties: 
      OriginAccessControlConfig:
        Description: Default Origin Access Control
        Name: ${self:provider.environment.NAMESPACE}-oac
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${self:provider.environment.NAMESPACE}-data
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: 'AES256'
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: s3-data-logs
#        VersioningConfiguration:
#          Status: Enabled

  Stream:
    Type: AWS::Kinesis::Stream
    Properties: 
      Name: ${self:provider.environment.NAMESPACE}-stream
      StreamEncryption:
        EncryptionType: KMS
        KeyId: alias/aws/kinesis
      StreamModeDetails:
        StreamMode: ON_DEMAND

  DeliveryStreamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'

  # To add permissions to use customer management keys refer to:
  #  https://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html#using-iam-s3
  DeliveryStreamPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allow reading data stream and read/write to data bucket
      Roles: 
        - !Ref DeliveryStreamRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'kinesis:Get*'
              - 'kinesis:DescribeStream*'
              - 'kinesis:List*'
            Resource: !GetAtt Stream.Arn
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !GetAtt DataBucket.Arn
              - !Sub ${DataBucket.Arn}/*

  # ref: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kinesisfirehose-deliverystream.html
  DeliveryStream: 
    Type: AWS::KinesisFirehose::DeliveryStream
    DependsOn:
      - DeliveryStreamPolicy
    Properties: 
      DeliveryStreamName: ${self:provider.environment.NAMESPACE}-delivery-stream
      DeliveryStreamType: KinesisStreamAsSource
      KinesisStreamSourceConfiguration: 
        KinesisStreamARN: !GetAtt Stream.Arn
        RoleARN: !GetAtt DeliveryStreamRole.Arn
      ExtendedS3DestinationConfiguration: 
        BucketARN: !GetAtt DataBucket.Arn
        BufferingHints: 
          SizeInMBs: 128
          IntervalInSeconds: 900
        # Athena compression support: https://docs.aws.amazon.com/athena/latest/ug/compression-formats.html
        # Firehose allowed values: GZIP | HADOOP_SNAPPY | Snappy | UNCOMPRESSED | ZIP
        # Ideally would use zstd since Athena supports it, but Firehose does not.
        # (Hadoop) Snappy is similar in speed to zstd but worse compression than zstd/gzip,
        #  and billing for Firehose and Athena is by data size.
        CompressionFormat: GZIP
        RoleARN: !GetAtt DeliveryStreamRole.Arn

Outputs:
  stream:
    Value: !Ref Stream
  streamArn:
    Value: !GetAtt Stream.Arn
  distributionDomainName:
    Value: !GetAtt Distribution.DomainName