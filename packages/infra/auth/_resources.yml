Resources:
  # Make sure to enable IAM Identity Center in the AWS Console yourself first, then
  #  copy the SAML metadata xml into the $SAML_METDATA environment variable.
  #  This declaration will create a duplicate identity provider entry in IAM, with an ARN 
  #  we can easily reference below.
  SamlProvider:
    Type: AWS::IAM::SAMLProvider
    Properties: 
      Name: ${self:provider.environment.NAMESPACE}-saml-provider
      SamlMetadataDocument: ${env:SAML_METADATA}

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ${self:provider.environment.NAMESPACE}-user-pool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: True
      MfaConfiguration: OPTIONAL
      EnabledMfas:
        - SOFTWARE_TOKEN_MFA
      Policies:
        PasswordPolicy:
          MinimumLength: 12
      UsernameConfiguration:
        CaseSensitive: False
      AliasAttributes:
        - email

  # Needed for cognito hosted ui
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      UserPoolId: !Ref UserPool
      # 1-63 chars. Lowercase letters, numbers, and hyphens. No hyper for first or last character. Periods to separate subdomain names.
      # Pre-check availability from the console, pick something long and random to avoid collision, or use your own custom domain.
      #Domain: abcdefgh12345678
      Domain: anything-auth

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ${self:provider.environment.NAMESPACE}-user-pool-client
      UserPoolId: !Ref UserPool
      SupportedIdentityProviders:
        - !Ref UserPoolIdentityProvider
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
        - email
        - profile
        - aws.cognito.signin.user.admin
      CallbackURLs:
        # Trailing slash (if present) should match client code exactly
        - http://localhost:3000/
        - https://${param:distributionDomainName}/
        #- !Sub https://${Distribution.DomainName}/
      AllowedOAuthFlowsUserPoolClient: True
      GenerateSecret: False

  # Need to duplicate some info in SamlProvider since UserPoolIdentityProvider doesn't take SamlProvider directly
  UserPoolIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref UserPool
      # This provider name is button text in the Cognito Hosted UI
      ProviderName: ${self:provider.environment.NAMESPACE}-user-pool-idp
      ProviderType: SAML
      ProviderDetails:
        MetadataFile: ${env:SAML_METADATA}
        #MetadataURL: ${env:SAML_METADATA_URL} # SAMLProvider takes only metadata file contents
      AttributeMapping:
        # Cognito attributes to IAM Identity Center attributes.
        # Also need to manually configure and map attributes in a new custom SAML application in IAM Identity Center.
        # ref: https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html
        # ref: https://docs.aws.amazon.com/singlesignon/latest/userguide/attributemappingsconcept.html#supportedssoattributes
        #username: '\${user:subject}' # username = sub, don't map this in Cognito (only map Subject in IAM Identity Center)
        email: '\${user:email}'
        preferred_username: '\${user:preferredUsername}'

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: True
      IdentityPoolName: ${self:provider.environment.NAMESPACE}-identity-pool
      SamlProviderARNs:
        - !GetAtt SamlProvider.Arn
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt WriteRole.Arn
        unauthenticated: !GetAtt UnauthRole.Arn

  ReadRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ${self:provider.environment.NAMESPACE}-read-role
      Path: '/anything/roles/' # becomes for ex: anything/roles/anything-api-development-read-role
      Description: 'Read user role'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringEquals":
                "cognito-identity.amazonaws.com:amr": authenticated
          - Effect: "Allow"
            Principal:
              Service: "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: ${self:provider.environment.NAMESPACE}-read-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "cognito-identity:*"
                Resource:
                - !Sub "arn:aws:cognito-identity:${env:AWS_REGION}:${AWS::AccountId}:identitypool/${IdentityPool}"
              - Effect: "Allow"
                Action:
                  - "execute-api:Invoke"
                Resource:
                - '${param:httpApiRootArn}/*/GET/types'
                - '${param:httpApiRootArn}/*/GET/items/*'
                - '${param:httpApiRootArn}/*/GET/collections/*'

  WriteRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ${self:provider.environment.NAMESPACE}-write-role
      Path: '/anything/roles/write/' # becomes for ex: anything/roles/anything-api-development-write-role
      Description: 'Write user role'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
          - Effect: "Allow"
            Principal:
              Service: "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: ${self:provider.environment.NAMESPACE}-write-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "cognito-identity:*"
                Resource:
                - !Sub "arn:aws:cognito-identity:${env:AWS_REGION}:${AWS::AccountId}:identitypool/${IdentityPool}"
              - Effect: "Allow"
                Action:
                  - "execute-api:Invoke"
                Resource:
                - '${param:httpApiRootArn}/*/GET/types'
                - '${param:httpApiRootArn}/*/GET/items/*'
                - '${param:httpApiRootArn}/*/GET/collections/*'
                - '${param:httpApiRootArn}/*/POST/items/*'
                - '${param:httpApiRootArn}/*/PUT/collections/*'
                - '${param:httpApiRootArn}/*/DELETE/items'
                - '${param:httpApiRootArn}/*/DELETE/collections'

  UnauthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ${self:provider.environment.NAMESPACE}-unauth-role
      Path: '/anything/roles/'
      Description: 'Unauthenticated user role'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": "unauthenticated"
      Policies:
        - PolicyName: ${self:provider.environment.NAMESPACE}-unauth-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "cognito-identity:*"
                Resource:
                - !Sub "arn:aws:cognito-identity:${env:AWS_REGION}:${AWS::AccountId}:identitypool/${IdentityPool}"
