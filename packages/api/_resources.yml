Resources:
  # src/migrations/schema.json should mirror this if local database is to be used
  MainDynamoDbTable:
    Type: AWS::DynamoDB::Table
    # ref: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-product-attribute-reference.html
    # To prevent accidentally deleting the resource using CloudFormation:
    #DeletionPolicy: Retain
    #UpdateReplacePolicy: Retain
    Properties:
      TableName: ${self:provider.environment.NAMESPACE}-main
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: sort
          KeyType: RANGE
      # Only the attributes needed for keys (in table or GSI, LSI) can be put here
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: sort
          AttributeType: S
        - AttributeName: type
          AttributeType: S
        - AttributeName: ctype
          AttributeType: S
#        - AttributeName: modified
#          AttributeType: N
      GlobalSecondaryIndexes:
        - IndexName: gsi1
          Projection:
            ProjectionType: ALL
          KeySchema:
            - AttributeName: type
              KeyType: HASH
            - AttributeName: sort
              KeyType: RANGE
        - IndexName: gsi2
          Projection:
            ProjectionType: KEYS_ONLY
          KeySchema:
            - AttributeName: ctype
              KeyType: HASH
            - AttributeName: id
              KeyType: RANGE
        - IndexName: gsi3
          Projection:
            ProjectionType: KEYS_ONLY
          KeySchema:
            - AttributeName: type
              KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      # Uncomment for deploying, following parameters are incompatible with serverless dynamodb local plugin:
      #StreamEnabled: True
      #StreamViewType: NEW_IMAGE

  TypesDynamoDbTable:
    Type: 'AWS::DynamoDB::Table'
    # Force second table to be created sequentially to allow any future indices to be created on table
    # ref: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html
    DependsOn: ${self:provider.environment.NAMESPACE}-main
    DeletionPolicy: Retain
    Properties:
      TableName: ${self:provider.environment.NAMESPACE}-types
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      # Needs to be unique in region
      # BucketName: ${self:provider.environment.NAMESPACE}-web-abcde12345
      BucketName: ${self:provider.environment.NAMESPACE}-web
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: 'AES256'
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: s3-access-logs
#      VersioningConfiguration:
#        Status: Enabled

  BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: 's3:GetObject*'
            Effect: Allow
            Resource: !Sub ${Bucket.Arn}/*
            Principal:
              Service: cloudfront.amazonaws.com
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${Distribution}

  LoggingBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: ${self:provider.environment.NAMESPACE}-logs
      PublicAccessBlockConfiguration:
        BlockPublicAcls : True
        BlockPublicPolicy : True
        IgnorePublicAcls : True
        RestrictPublicBuckets : True
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: 'AES256'
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
    DeletionPolicy: Delete

  Distribution:
    # Note: no AWS WAF (web app firewall) configured
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !GetAtt Bucket.RegionalDomainName
          Id: S3Origin
          S3OriginConfig:
            # Empty string allows both cloudfront and s3 url access to resource
            # ref: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-s3originconfig.html#cfn-cloudfront-distribution-s3originconfig-originaccessidentity
            OriginAccessIdentity: ""
          OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
#        - DomainName: !Sub "${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
#          Id: ApiOrigin
#          CustomOriginConfig:
#            OriginProtocolPolicy: https-only
        Enabled: True
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          TargetOriginId: S3Origin
          # ref: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html#managed-cache-caching-optimized
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
          # ref: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html#managed-origin-request-policy-cors-s3
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
          # ref: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-response-headers-policies.html#managed-response-headers-policies-security
          ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # SecurityHeadersPolicy
          ViewerProtocolPolicy: redirect-to-https
#        CacheBehaviors:
#          - PathPattern: "v1/hello"
#            AllowedMethods:
#            - GET
#            - HEAD
#            - OPTIONS
#            TargetOriginId: ApiOrigin
#            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
#            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac # AllViewerExceptHostHeader
#            ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # SecurityHeadersPolicy
#            ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_All
        Logging:
          Bucket: !GetAtt LoggingBucket.RegionalDomainName
          Prefix: 'cloudfront-access-logs'
        ViewerCertificate:
          CloudFrontDefaultCertificate: True

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    DependsOn:
      - Bucket
    Properties: 
      OriginAccessControlConfig:
        Description: Default Origin Access Control
        Name: !Ref AWS::StackName
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # Make sure to enable IAM Identity Center in the AWS Console yourself first, then
  #  copy the SAML metadata xml into the $SAML_METDATA environment variable.
  #  This declaration will create a duplicate identity provider entry in IAM, with an ARN 
  #  we can easily reference below.
  SamlProvider:
    Type: AWS::IAM::SAMLProvider
    Properties: 
      Name: ${self:provider.environment.NAMESPACE}-saml-provider
      SamlMetadataDocument: ${env:SAML_METADATA}
  
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ${self:provider.environment.NAMESPACE}-user-pool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: True
      MfaConfiguration: OPTIONAL
      EnabledMfas:
        - SOFTWARE_TOKEN_MFA
      Policies:
        PasswordPolicy:
          MinimumLength: 12
      UsernameConfiguration:
        CaseSensitive: False
      AliasAttributes:
        - email

  # Needed for cognito hosted ui
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      UserPoolId: !Ref UserPool
      # 1-63 chars. Lowercase letters, numbers, and hyphens. No hyper for first or last character. Periods to separate subdomain names.
      # Pre-check availability from the console, pick something long and random to avoid collision, or use your own custom domain.
      #Domain: abcdefgh12345678
      Domain: anything-auth

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ${self:provider.environment.NAMESPACE}-user-pool-client
      UserPoolId: !Ref UserPool
      SupportedIdentityProviders:
        - !Ref UserPoolIdentityProvider
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
        - email
        - profile
        - aws.cognito.signin.user.admin
      CallbackURLs:
        # Trailing slash (if present) should match client code exactly
        - http://localhost:3000/
        - !Sub https://${Distribution.DomainName}/
      AllowedOAuthFlowsUserPoolClient: True
      GenerateSecret: False

  # Need to duplicate some info in SamlProvider since UserPoolIdentityProvider doesn't take SamlProvider directly
  UserPoolIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref UserPool
      # This provider name is button text in the Cognito Hosted UI
      ProviderName: ${self:provider.environment.NAMESPACE}-user-pool-idp
      ProviderType: SAML
      ProviderDetails:
        MetadataFile: ${env:SAML_METADATA}
        #MetadataURL: ${env:SAML_METADATA_URL} # SAMLProvider takes only metadata file contents
      AttributeMapping:
        # Cognito attributes to IAM Identity Center attributes.
        # Also need to manually configure and map attributes in a new custom SAML application in IAM Identity Center.
        # ref: https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html
        # ref: https://docs.aws.amazon.com/singlesignon/latest/userguide/attributemappingsconcept.html#supportedssoattributes
        #username: '\${user:subject}' # username = sub, don't map this in Cognito (only map Subject in IAM Identity Center)
        email: '\${user:email}'
        preferred_username: '\${user:preferredUsername}'

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: True
      IdentityPoolName: ${self:provider.environment.NAMESPACE}-identity-pool
      SamlProviderARNs:
        - !GetAtt SamlProvider.Arn
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt WriteRole.Arn
        unauthenticated: !GetAtt UnauthRole.Arn

  ReadRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ${self:provider.environment.NAMESPACE}-read-role
      Path: '/anything/roles/' # becomes for ex: anything/roles/anything-api-development-read-role
      Description: 'Read user role'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringEquals":
                "cognito-identity.amazonaws.com:amr": authenticated
          - Effect: "Allow"
            Principal:
              Service: "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: ${self:provider.environment.NAMESPACE}-read-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "cognito-identity:*"
                Resource:
                - !Sub "arn:aws:cognito-identity:${env:AWS_REGION}:${AWS::AccountId}:identitypool/${IdentityPool}"
              - Effect: "Allow"
                Action:
                  - "execute-api:Invoke"
                Resource:
                - !Sub 'arn:aws:execute-api:${env:AWS_REGION}:${AWS::AccountId}:${HttpApi}/*/GET/types'
                - !Sub 'arn:aws:execute-api:${env:AWS_REGION}:${AWS::AccountId}:${HttpApi}/*/GET/items/*'
                - !Sub 'arn:aws:execute-api:${env:AWS_REGION}:${AWS::AccountId}:${HttpApi}/*/GET/collections/*'

  WriteRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ${self:provider.environment.NAMESPACE}-write-role
      Path: '/anything/roles/write/' # becomes for ex: anything/roles/anything-api-development-write-role
      Description: 'Write user role'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
          - Effect: "Allow"
            Principal:
              Service: "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: ${self:provider.environment.NAMESPACE}-write-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "cognito-identity:*"
                Resource:
                - !Sub "arn:aws:cognito-identity:${env:AWS_REGION}:${AWS::AccountId}:identitypool/${IdentityPool}"
              - Effect: "Allow"
                Action:
                  - "execute-api:Invoke"
                Resource:
                - !Sub 'arn:aws:execute-api:${env:AWS_REGION}:${AWS::AccountId}:${HttpApi}/*/GET/types'
                - !Sub 'arn:aws:execute-api:${env:AWS_REGION}:${AWS::AccountId}:${HttpApi}/*/GET/items/*'
                - !Sub 'arn:aws:execute-api:${env:AWS_REGION}:${AWS::AccountId}:${HttpApi}/*/GET/collections/*'
                - !Sub 'arn:aws:execute-api:${env:AWS_REGION}:${AWS::AccountId}:${HttpApi}/*/POST/items/*'
                - !Sub 'arn:aws:execute-api:${env:AWS_REGION}:${AWS::AccountId}:${HttpApi}/*/PUT/collections/*'
                - !Sub 'arn:aws:execute-api:${env:AWS_REGION}:${AWS::AccountId}:${HttpApi}/*/DELETE/items'
                - !Sub 'arn:aws:execute-api:${env:AWS_REGION}:${AWS::AccountId}:${HttpApi}/*/DELETE/collections'

  UnauthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ${self:provider.environment.NAMESPACE}-unauth-role
      Path: '/anything/roles/'
      Description: 'Unauthenticated user role'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": "unauthenticated"
      Policies:
        - PolicyName: ${self:provider.environment.NAMESPACE}-unauth-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "cognito-identity:*"
                Resource:
                - !Sub "arn:aws:cognito-identity:${env:AWS_REGION}:${AWS::AccountId}:identitypool/${IdentityPool}"
