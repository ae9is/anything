name: aws
runtime: nodejs18.x
stage: ${env:STAGE, 'dev'}
region: ${env:AWS_REGION}
# Opt in to CloudFormation direct deployments
# ref: https://www.serverless.com/framework/docs/providers/aws/guide/deploying
deploymentMethod: direct
environment:
  NAMESPACE: ${self:service}-${sls:stage}
  AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
httpApi:
  cors: true
  payload: '2.0'
  # Using IAM to control API method access
  # ref: https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-access-control-iam.html
  # ref: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-control-access-using-iam-policies-to-invoke-api.html

# Allow app's lambda functions to connect to dynamodb.
# ref: https://www.serverless.com/framework/docs/providers/aws/guide/iam
iam:
  role:
    statements:
      - Effect: Allow
        Action:
          # ref: https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazondynamodb.html
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          - dynamodb:BatchGetItem
          - dynamodb:BatchWriteItem
#          - dynamodb:CreateTable
#          - dynamodb:UpdateTable
#          - dynamodb:DescribeStream
#          - dynamodb:ListStreams
#          - dynamodb:GetRecords
#          - dynamodb:GetShardIterator
#          - dynamodb:ListShards
        Resource:
          - "arn:aws:dynamodb:${env:AWS_REGION}:*:table/${self:provider.environment.NAMESPACE}-main"
          - "arn:aws:dynamodb:${env:AWS_REGION}:*:table/${self:provider.environment.NAMESPACE}-main/index/*"
#          - "arn:aws:dynamodb:${env:AWS_REGION}:*:table/${self:provider.environment.NAMESPACE}-main/stream/*"
